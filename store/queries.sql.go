// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: queries.sql

package store

import (
	"context"
	"database/sql"
)

const deleteFile = `-- name: DeleteFile :exec
DELETE FROM files WHERE filepath = ?
`

func (q *Queries) DeleteFile(ctx context.Context, filepath string) error {
	_, err := q.db.ExecContext(ctx, deleteFile, filepath)
	return err
}

const deletePage = `-- name: DeletePage :exec
DELETE FROM pages WHERE filepath = ? AND page_num = ? AND page_size_power = ?
`

type DeletePageParams struct {
	Filepath      string
	PageNum       int64
	PageSizePower int64
}

func (q *Queries) DeletePage(ctx context.Context, arg DeletePageParams) error {
	_, err := q.db.ExecContext(ctx, deletePage, arg.Filepath, arg.PageNum, arg.PageSizePower)
	return err
}

const deletePages = `-- name: DeletePages :exec
DELETE FROM pages WHERE filepath = ?
`

func (q *Queries) DeletePages(ctx context.Context, filepath string) error {
	_, err := q.db.ExecContext(ctx, deletePages, filepath)
	return err
}

const getFileLength = `-- name: GetFileLength :one




SELECT length FROM files WHERE filepath = ?
`

// CREATE TABLE files (
//
//	filepath        VARCHAR(2048) PRIMARY KEY,
//	length          INTEGER       NOT NULL
//
// );
// CREATE INDEX files_last_access_at ON files (last_access_at);
// CREATE TABLE pages (
//
//	filepath        VARCHAR(2048) NOT NULL,
//	page_num        INTEGER       NOT NULL,
//	page_size_power TINYINT       NOT NULL,
//	data            BLOB          NOT NULL,
//	last_write_at   INTEGER, -- unix timestamp in millis
//	last_read_at    INTEGER, -- unix timestamp in millis
//	last_acceess_at INTEGER VIRTUAL ALWAYS AS (GREATEST(last_write_at, last_read_at)) STORED,
//	PRIMARY KEY (filepath, page_num, page_size_power)
//
// )
// CREATE INDEX pages_last_access_at ON pages (last_access_at);
func (q *Queries) GetFileLength(ctx context.Context, filepath string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getFileLength, filepath)
	var length int64
	err := row.Scan(&length)
	return length, err
}

const getPage = `-- name: GetPage :one
SELECT data FROM pages WHERE filepath = ? AND page_num = ? AND page_size_power = ?
`

type GetPageParams struct {
	Filepath      string
	PageNum       int64
	PageSizePower int64
}

func (q *Queries) GetPage(ctx context.Context, arg GetPageParams) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, getPage, arg.Filepath, arg.PageNum, arg.PageSizePower)
	var data []byte
	err := row.Scan(&data)
	return data, err
}

const updatePageLastReadAt = `-- name: UpdatePageLastReadAt :exec
UPDATE pages SET last_read_at = ? WHERE filepath = ? AND page_num = ? AND page_size_power = ?
`

type UpdatePageLastReadAtParams struct {
	LastReadAt    sql.NullInt64
	Filepath      string
	PageNum       int64
	PageSizePower int64
}

func (q *Queries) UpdatePageLastReadAt(ctx context.Context, arg UpdatePageLastReadAtParams) error {
	_, err := q.db.ExecContext(ctx, updatePageLastReadAt,
		arg.LastReadAt,
		arg.Filepath,
		arg.PageNum,
		arg.PageSizePower,
	)
	return err
}

const updatePageLastWriteAt = `-- name: UpdatePageLastWriteAt :exec
UPDATE pages SET last_write_at = ? WHERE filepath = ? AND page_num = ? AND page_size_power = ?
`

type UpdatePageLastWriteAtParams struct {
	LastWriteAt   sql.NullInt64
	Filepath      string
	PageNum       int64
	PageSizePower int64
}

func (q *Queries) UpdatePageLastWriteAt(ctx context.Context, arg UpdatePageLastWriteAtParams) error {
	_, err := q.db.ExecContext(ctx, updatePageLastWriteAt,
		arg.LastWriteAt,
		arg.Filepath,
		arg.PageNum,
		arg.PageSizePower,
	)
	return err
}

const upsertFileLength = `-- name: UpsertFileLength :exec
INSERT INTO files (filepath, length) VALUES (?, ?)
ON CONFLICT (filepath) DO UPDATE SET length = excluded.length
`

type UpsertFileLengthParams struct {
	Filepath string
	Length   int64
}

func (q *Queries) UpsertFileLength(ctx context.Context, arg UpsertFileLengthParams) error {
	_, err := q.db.ExecContext(ctx, upsertFileLength, arg.Filepath, arg.Length)
	return err
}

const upsertPage = `-- name: UpsertPage :exec
INSERT INTO pages (filepath, page_num, page_size_power, last_write_at, data)
VALUES (?, ?, ?, ?, ?)
`

type UpsertPageParams struct {
	Filepath      string
	PageNum       int64
	PageSizePower int64
	LastWriteAt   sql.NullInt64
	Data          []byte
}

func (q *Queries) UpsertPage(ctx context.Context, arg UpsertPageParams) error {
	_, err := q.db.ExecContext(ctx, upsertPage,
		arg.Filepath,
		arg.PageNum,
		arg.PageSizePower,
		arg.LastWriteAt,
		arg.Data,
	)
	return err
}
